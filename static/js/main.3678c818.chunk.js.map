{"version":3,"sources":["components/Home/Home.js","components/Errors/PageNotFound.js","config/routes.js","actions/constants.js","components/NavBar/NavBar.js","config/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","PageNotFound","console","log","exact","path","Logged","className","id","Search","to","Login","useState","showLogin","setShowLogin","type","placeholder","onClick","aria-label","NavBar","this","props","appname","user","style","backgroundColor","class","data-toggle","data-target","aria-controls","aria-expanded","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","componentDidMount","state","db","collection","get","then","querySnapshot","forEach","doc","data","name","setState","fullname","email","firestore","marginTop","rel","href","integrity","crossorigin","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3678c818.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return <div>Este es el home.</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PageNotFound extends Component {\r\n  render() {\r\n    console.log(\"Hola2\");\r\n    return <div>Error 404 Not Found Page.</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Home from \"../components/Home/Home\";\r\nimport PageNotFound from \"../components/Errors/PageNotFound\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { BASE } from '../actions/constants';\r\n\r\nconst base = \"/auth-system-react/\"\r\n\r\nexport default (\r\n    <>\r\n      <Switch>\r\n        <Route exact path={BASE}>\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <PageNotFound />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n  ","export const LOGIN = \"Iniciar sesi칩n\";\r\nexport const LOGOUT = \"Cerrar sesi칩n\";\r\nexport const UPDATED = \"Actualizar\";\r\nexport const PASSWORD = \"Contrase침a\";\r\nexport const USER = \"Correo\";\r\nexport const MESSAGE = \"Mensaje\";\r\nexport const SEARCH = \"Buscar\";\r\nexport const BASE = \"/auth-system-react/\";\r\n","import React, { Component, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { SEARCH, LOGIN, BASE, PASSWORD, USER } from '../../actions/constants';\r\n\r\nconst Logged = () => (\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n    <Search />\r\n    <ul className=\"navbar-nav ml-auto\">\r\n      <li className=\"nav-item active\">\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Home <span className=\"sr-only\">(current)</span>\r\n          </Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/dashboard\">\r\n            Dashboard\r\n          </Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nfunction Login() {\r\n  const [showLogin, setShowLogin] = useState(false);\r\n  return (\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n      <Search />\r\n      <ul className=\"navbar-nav ml-auto\">\r\n        <li className=\"nav-item active\">\r\n        {\r\n          showLogin ? \r\n          <form className=\"form-inline my-2 my-lg-0\">\r\n            <input type=\"text\" className=\"form-control  mr-sm-2\" id={USER} placeholder={USER} />\r\n            <input type=\"password\" className=\"form-control  mr-sm-2\" id={PASSWORD} placeholder={PASSWORD} />\r\n            <button type=\"submit\" className=\"btn btn-primary my-2 my-sm-0\">{LOGIN}</button>\r\n          </form>\r\n          :\r\n          <Link onClick={() => setShowLogin(true)} className=\"nav-link\">Iniciar sesi칩n</Link>\r\n        }\r\n\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Search() {\r\n  return (\r\n  <form className=\"form-inline my-2 my-lg-0\">\r\n    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder={SEARCH} aria-label={SEARCH} />\r\n    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">{SEARCH}</button>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    const { appname, user } = this.props;\r\n    const navStyle = {\r\n      backgroundColor: 'silver',\r\n    }\r\n    return (\r\n      <div>\r\n        <nav\r\n          className=\"navbar navbar-expand-md navbar-light fixed-top\"\r\n          style={navStyle}\r\n        >\r\n          <div className=\"container\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              <i class=\"fas fa-user-shield\"></i>\r\n              {' '+appname}\r\n            </Link>\r\n            <button\r\n                  className=\"navbar-toggler\"\r\n                  type=\"button\"\r\n                  data-toggle=\"collapse\"\r\n                  data-target=\"#navbarNav\"\r\n                  aria-controls=\"navbarNav\"\r\n                  aria-expanded=\"false\"\r\n                  aria-label=\"Toggle navigation\"\r\n                >\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            { user.id==='' ?  <Login /> : <Logged /> }\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as firebase from 'firebase/app'\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBVdLFVxFB59Ee-oYAar4IM-JB1ETJuBjo\",\r\n    authDomain: \"auth-system-react.firebaseapp.com\",\r\n    databaseURL: \"https://auth-system-react.firebaseio.com\",\r\n    projectId: \"auth-system-react\",\r\n    storageBucket: \"auth-system-react.appspot.com\",\r\n    messagingSenderId: \"346641420723\",\r\n    appId: \"1:346641420723:web:516d4f8678479e181bbbc6\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport routes from './config/routes';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport firebase from './config/firebase';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      appname: '',\r\n      user: {\r\n        id: '',\r\n        fullname: '',\r\n        email:'',\r\n      },\r\n      db: firebase.firestore(),\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let appname = '';\r\n    this.state.db\r\n      .collection(\"app\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          appname = doc.data().name;\r\n          this.setState({\r\n            appname,\r\n          });\r\n        });});\r\n  };\r\n\r\n  render() {\r\n    const { appname, user } = this.state;\r\n    const appStyle = {\r\n      marginTop: '4em',\r\n    }\r\n    return (\r\n      <Router>\r\n        <NavBar appname={appname} user={user} />\r\n        <div className=\"App\" style={appStyle}>\r\n          <link \r\n            rel=\"stylesheet\" \r\n            href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\" \r\n            integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\" \r\n            crossorigin=\"anonymous\"\r\n          />\r\n          <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\r\n          />\r\n          {routes}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}