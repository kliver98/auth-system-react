{"version":3,"sources":["components/Home/Home.js","components/Errors/PageNotFound.js","config/routes.js","config/firebase.js","components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","PageNotFound","console","log","exact","path","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","this","props","appname","user","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","name","App","componentDidMount","state","db","collection","get","then","querySnapshot","forEach","doc","data","setState","firestore","rel","href","integrity","crossOrigin","src","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SAEqBA,E,uKAEjB,OAAO,qD,GAFuBC,aCAbC,E,uKAGjB,OADAC,QAAQC,IAAI,SACL,8D,GAH+BH,a,OCGtC,sCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,S,cCEVC,gBAVqB,CACjBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAIIP,QCVMQ,E,uKACT,IAAD,EACmBC,KAAKC,OAAS,OAAhCC,EADD,EACCA,QAASC,EADV,EACUA,KACjB,OACE,6BACE,yBAAKC,UAAU,iDACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAC/BH,GAEH,4BACEE,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,aAC3C,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,QACO,0BAAMD,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,cAA9B,cAIF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,UAA9B,YAMN,0BAAMD,UAAU,gBAAhB,eAA4CD,EAAKU,a,GAxCzB5B,aCkErB6B,E,kDA9Db,aAAe,IAAD,8BACZ,gBAOFC,kBAAoB,WAClB,IAAIb,EAAU,GACd,EAAKc,MAAMC,GACRC,WAAW,OACXC,MACAC,MAAK,SAACC,GACLA,EAAcC,SAAQ,SAACC,GACrBrB,EAAUqB,EAAIC,OAAOX,KACrB,EAAKY,SAAS,CACZvB,kBAGRf,QAAQC,IAAIc,IAlBZ,EAAKc,MAAQ,CACXd,QAAS,aACTe,GAAI1B,EAASmC,aAJH,E,qDAuBJ,IACAxB,EAAYF,KAAKgB,MAAjBd,QAER,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQA,QAASA,EAASC,KAHtB,CAACU,KAAK,YAIV,yBAAKT,UAAU,OACb,0BACEuB,IAAI,aACJC,KAAK,2EACLC,UAAU,0EACVC,YAAY,cAEd,4BACEC,IAAI,mDACJF,UAAU,0EACVC,YAAY,cAEd,4BACEC,IAAI,uEACJF,UAAU,0EACVC,YAAY,cAEd,4BACEC,IAAI,yEACJF,UAAU,0EACVC,YAAY,cAEd,0BACEH,IAAI,aACJC,KAAK,gFAENI,Q,GAxDO/C,aCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.0fbeded1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return <div>Este es el home.</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PageNotFound extends Component {\r\n  render() {\r\n    console.log(\"Hola2\");\r\n    return <div>Error 404 Not Found Page.</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Home from \"../components/Home/Home\";\r\nimport PageNotFound from \"../components/Errors/PageNotFound\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nexport default (\r\n    <>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <PageNotFound />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n  ","import * as firebase from 'firebase/app'\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBVdLFVxFB59Ee-oYAar4IM-JB1ETJuBjo\",\r\n    authDomain: \"auth-system-react.firebaseapp.com\",\r\n    databaseURL: \"https://auth-system-react.firebaseio.com\",\r\n    projectId: \"auth-system-react\",\r\n    storageBucket: \"auth-system-react.appspot.com\",\r\n    messagingSenderId: \"346641420723\",\r\n    appId: \"1:346641420723:web:516d4f8678479e181bbbc6\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../config/firebase';\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    const { appname, user } = this.props || 'hola';\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          <div className=\"container\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n              {appname}\r\n            </Link>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarNav\"\r\n              aria-controls=\"navbarNav\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item active\">\r\n                  <Link className=\"nav-link\" to=\"/\">\r\n                    Home <span className=\"sr-only\">(current)</span>\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/dashboard\">\r\n                    Dashboard\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/tasks\">\r\n                    Tasks\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <span className=\"my-2 my-lg-0\">Bienvenido: {user.name}</span>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport routes from './config/routes';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport firebase from './config/firebase';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      appname: 'loading...',\r\n      db: firebase.firestore(),\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let appname = '';\r\n    this.state.db\r\n      .collection(\"app\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          appname = doc.data().name;\r\n          this.setState({\r\n            appname\r\n          });\r\n        });});\r\n    console.log(appname);\r\n  };\r\n\r\n  render() {\r\n    const { appname } = this.state;\r\n    let u = {name:\"Kliver\"};\r\n    return (\r\n      <Router>\r\n        <NavBar appname={appname} user={u} />\r\n        <div className=\"App\">\r\n          <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\r\n            integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n          <script\r\n            src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\"\r\n            integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n          <script\r\n            src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\"\r\n            integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n          <script\r\n            src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\"\r\n            integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n          <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\r\n          />\r\n          {routes}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}